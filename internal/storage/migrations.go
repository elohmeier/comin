// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_deployment.down.sql (0)
// 000001_deployment.up.sql (179B)
// 000002_generation.down.sql (0)
// 000002_generation.up.sql (169B)
// 000003_generation_more_columns.down.sql (0)
// 000003_generation_more_columns.up.sql (539B)

package storage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_deploymentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000001_deploymentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_deploymentDownSql,
		"000001_deployment.down.sql",
	)
}

func _000001_deploymentDownSql() (*asset, error) {
	bytes, err := _000001_deploymentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_deployment.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1710669205, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000001_deploymentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\xb1\xca\xc2\x40\x10\x04\xe0\xfe\x7f\x8a\x29\x7f\x21\x6f\x60\x15\x65\x95\x43\x8d\x72\xd9\x22\xa9\x42\x30\x4b\x08\x98\xbb\xb0\xd9\x14\xbe\xbd\x18\x0f\xed\x66\xe0\x63\x66\xef\x29\x67\x02\xe7\xbb\x33\xc1\x1d\x50\x5c\x19\x54\xb9\x92\x4b\x74\x32\x3d\xe2\x73\x94\x60\xf8\x5f\x96\xa1\x03\x53\xc5\xb8\x79\x77\xc9\x7d\x8d\x13\xd5\x19\x7a\x09\xa2\xad\x0d\x31\x34\x5f\x91\x61\xb6\x56\xad\x69\x0d\xae\xe0\x0c\x12\xba\x5f\x56\x8d\xda\x8c\x73\x9f\xa4\xca\xc7\xde\xe3\x38\x84\x37\xa1\x23\xf9\x75\xc0\x96\x39\x99\x38\xa5\x8b\xb5\x6f\xb6\x7f\xaf\x00\x00\x00\xff\xff\xe7\xe4\xfc\x47\xb3\x00\x00\x00")

func _000001_deploymentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_deploymentUpSql,
		"000001_deployment.up.sql",
	)
}

func _000001_deploymentUpSql() (*asset, error) {
	bytes, err := _000001_deploymentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_deployment.up.sql", size: 179, mode: os.FileMode(0644), modTime: time.Unix(1710705054, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x8d, 0x6d, 0x36, 0x71, 0x1b, 0xa, 0xc8, 0x24, 0xb7, 0x32, 0x6e, 0x31, 0xf2, 0x23, 0xe1, 0xc6, 0x67, 0xab, 0xf9, 0x1f, 0xa, 0x97, 0xe5, 0xec, 0xd4, 0x1a, 0x23, 0x6a, 0x12, 0x7, 0xca}}
	return a, nil
}

var __000002_generationDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_generationDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_generationDownSql,
		"000002_generation.down.sql",
	)
}

func _000002_generationDownSql() (*asset, error) {
	bytes, err := _000002_generationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_generation.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1710711847, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000002_generationUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4f\xcd\x4b\x2d\x4a\x2c\xc9\xcc\xcf\x53\xd0\x28\x2d\xcd\x4c\x51\x08\x71\x8d\x08\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xd4\x51\x28\x4e\xcd\x49\x4d\x2e\x49\x4d\x89\x2f\x4a\xcd\xcd\x2f\x49\x8d\xcf\x4b\xcc\x4d\x05\x2b\x43\x92\x4a\x2a\x4a\xcc\x4b\xce\xc0\x2a\x95\x9c\x9f\x9b\x9b\x59\x12\x0f\x35\x1a\x53\x22\xb7\x38\x1d\x2c\xa3\x69\xcd\xc5\x05\x08\x00\x00\xff\xff\x73\x64\xaf\x98\xa9\x00\x00\x00")

func _000002_generationUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_generationUpSql,
		"000002_generation.up.sql",
	)
}

func _000002_generationUpSql() (*asset, error) {
	bytes, err := _000002_generationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_generation.up.sql", size: 169, mode: os.FileMode(0644), modTime: time.Unix(1710713457, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xf, 0xee, 0x73, 0xc6, 0x73, 0x7, 0x19, 0xe, 0x63, 0xb7, 0x24, 0x2a, 0x87, 0xea, 0x19, 0x65, 0x8e, 0x3c, 0x37, 0x8b, 0x18, 0x85, 0xe1, 0x3a, 0x29, 0x1a, 0x32, 0x20, 0x5f, 0x3a, 0x7d}}
	return a, nil
}

var __000003_generation_more_columnsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000003_generation_more_columnsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_generation_more_columnsDownSql,
		"000003_generation_more_columns.down.sql",
	)
}

func _000003_generation_more_columnsDownSql() (*asset, error) {
	bytes, err := _000003_generation_more_columnsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_generation_more_columns.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1710780921, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000003_generation_more_columnsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd0\x41\xaa\xc2\x40\x0c\xc6\xf1\xfd\x3b\x45\xee\xf1\x56\xd5\x76\x21\xd4\x0a\x32\x82\xbb\x21\xed\x84\x4e\xa0\x4d\x65\x92\xe9\xf9\xa5\xba\x72\xe5\xd4\x7d\x7e\xf9\xe0\x5f\xb5\xae\xb9\x82\xab\x0e\x6d\x03\x23\x09\x25\x34\x5e\x04\xaa\xba\x86\xe3\xa5\xbd\x9d\x3b\x50\x9a\x68\x30\x0a\xbe\x4f\x28\x43\xf4\xac\xde\x48\x8d\x65\x84\x53\xe7\xfe\xff\xbe\x7f\x88\x8b\x9a\xe0\x4c\xe0\x9a\x7b\x11\x50\x43\xcb\x5a\x7c\xbe\x64\xf3\x0f\xb4\x58\x0c\x42\x5a\xf7\x01\x5a\x71\xca\xb8\x45\x98\x71\x88\x2c\xe4\x39\xec\xc2\x5e\x0d\xd3\xe6\xd1\x4a\xab\xbd\x18\x49\xd8\x85\xfa\xcc\x53\xf8\x61\xec\xed\x3e\xd7\x9e\x01\x00\x00\xff\xff\x50\x07\xde\x4d\x1b\x02\x00\x00")

func _000003_generation_more_columnsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_generation_more_columnsUpSql,
		"000003_generation_more_columns.up.sql",
	)
}

func _000003_generation_more_columnsUpSql() (*asset, error) {
	bytes, err := _000003_generation_more_columnsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_generation_more_columns.up.sql", size: 539, mode: os.FileMode(0644), modTime: time.Unix(1710783461, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x2a, 0x34, 0x6a, 0xdb, 0x9d, 0x96, 0x87, 0xf5, 0x28, 0xef, 0x74, 0xfe, 0x89, 0x75, 0x1a, 0x71, 0x9, 0x66, 0x8d, 0x99, 0x35, 0x8e, 0x7e, 0xfe, 0x5f, 0x5a, 0x80, 0xe1, 0x58, 0x35, 0x2e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_deployment.down.sql":              _000001_deploymentDownSql,
	"000001_deployment.up.sql":                _000001_deploymentUpSql,
	"000002_generation.down.sql":              _000002_generationDownSql,
	"000002_generation.up.sql":                _000002_generationUpSql,
	"000003_generation_more_columns.down.sql": _000003_generation_more_columnsDownSql,
	"000003_generation_more_columns.up.sql":   _000003_generation_more_columnsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_deployment.down.sql":              {_000001_deploymentDownSql, map[string]*bintree{}},
	"000001_deployment.up.sql":                {_000001_deploymentUpSql, map[string]*bintree{}},
	"000002_generation.down.sql":              {_000002_generationDownSql, map[string]*bintree{}},
	"000002_generation.up.sql":                {_000002_generationUpSql, map[string]*bintree{}},
	"000003_generation_more_columns.down.sql": {_000003_generation_more_columnsDownSql, map[string]*bintree{}},
	"000003_generation_more_columns.up.sql":   {_000003_generation_more_columnsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
